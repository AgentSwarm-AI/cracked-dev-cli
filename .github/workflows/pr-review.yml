name: PR Review
on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: AI PR Review
        uses: jonit-dev/openrouter-github-action@main
        with:
          # Required inputs
          github_token: ${{ secrets.GITHUB_TOKEN }} # Automatically provided
          open_router_key: ${{ secrets.OPEN_ROUTER_KEY }} # Must be set in repository secrets

          # Optional inputs with defaults
          model_id: "google/gemini-2.0-flash-thinking-exp:free" # Default model
          max_tokens: "4096" # Default max tokens
          review_label: "ai-review"
          custom_prompt: |
            ### **AI PR Review Instructions**

            **Objective:**  
            Provide a clear, concise, and actionable review of the Pull Request (PR). Focus on overall codebase quality, including readability, maintainability, functionality, and adherence to best practices. Avoid minor nitty-picky comments and repetitive feedback.

            **Focus Areas:**
            1. **Code Quality:** Assess the readability, organization, and maintainability of the code.
            2. **Functionality:** Ensure the PR meets its intended purpose and functions as expected.
            3. **Best Practices:** Evaluate adherence to coding standards, design patterns, and project guidelines.
            4. **Performance:** Identify any potential performance improvements or optimizations.
            5. **Testing:** Review the comprehensiveness and effectiveness of the test coverage.
            6. **Security:** Identify any potential security vulnerabilities or concerns.
            7. **Bugs Found:** List any bugs identified in the PR.

            **Review Structure:**
            1. **Overall Summary**
              - **Score:** Provide an overall score out of 5 stars.
              - **Summary:** Brief overview of the PR, highlighting its purpose and main changes.

            2. **Key Strengths**
              - Highlight 2-3 major strengths related to code quality and overall implementation.

            3. **Areas for Improvement**
              - Identify 2-3 significant areas that need enhancement.
              - Provide actionable suggestions for each identified issue.

            4. **Bugs Found**
              - Present any bugs identified in the PR in a table format.
              - **Table Columns:**
                - **Bug Name**
                - **Affected Files**
                - **Description**
                - **Confidence** (High üü¢, Medium üü°, Low üî¥)
              - **Formatting Instructions:**
                - The **Bug Name** should be a clickable link that navigates to the corresponding bug details in the **Bug Details** section.
                - Use Markdown anchor links for navigation.

            5. **Bug Details**
              - For each bug listed in the **Bugs Found** table, provide a detailed description.
              - **Formatting Instructions:**
                - Use Markdown headers with IDs corresponding to the links in the **Bugs Found** table.
                - Example:
                  ```markdown
                  ### Bug: [Null Pointer](#null-pointer)
                  ```
                - Ensure each bug detail starts with a unique header that matches the anchor link.

            6. **Performance Considerations** (if applicable)
              - Mention any high-level performance optimizations or concerns.

            7. **Best Practices**
              - Recommendations on adhering to coding standards, design patterns, or other best practices relevant to the project.

            8. **Testing**
              - Evaluate the adequacy of test coverage and suggest areas for additional tests if necessary.

            9. **Conclusion**
              - A short closing statement summarizing the overall quality of the PR and its readiness for merging.

            **Scoring Criteria:**
            - ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5/5): Exceptional quality, no major issues, and well-optimized.
            - ‚≠ê‚≠ê‚≠ê‚≠ê (4/5): High quality, minor improvements possible.
            - ‚≠ê‚≠ê‚≠ê (3/5): Average quality, some issues need attention.
            - ‚≠ê‚≠ê (2/5): Below average quality, significant improvements required.
            - ‚≠ê (1/5): Poor quality, major issues, and refactoring needed.

            **Formatting Guidelines:**
            - Use clear and concise language.
            - Limit each section to the most critical points (2-3 items per section).
            - Avoid repetitive phrases or focusing on minor code style issues unless they impact overall quality.
            - Use bullet points and clear headings for readability.
            - For the **Bugs Found** section, render the bugs in a Markdown table with the specified columns.
            - In the **Bug Details** section, ensure each bug has a corresponding detailed explanation.

            **Notes:**
            - If you have nothing to say about a particular section, you can omit it from the review.
            - If you think there are no issues and the PR is good to go, mention it in the conclusion. No need to add unnecessary feedback.

            **Example Output:**

            ---

            ### **AI Review Summary**

            **üèÜ Overall Score:** ‚≠ê‚≠ê‚≠ê‚≠ê (4/5)  
            *The PR successfully implements the new feature with clean and well-structured code. Minor improvements are recommended to enhance maintainability and performance.*

            ---

            **‚úÖ Key Strengths**
            - **Feature Implementation:** Effectively adds the new feature, enhancing the application's functionality.
            - **Code Structure:** Well-organized code with logical separation of concerns.
            - **Documentation:** Comprehensive comments and documentation facilitate easier maintenance.

            ---

            **‚ö†Ô∏è Areas for Improvement**
            - **Error Handling:**  
              *Suggestion:* Implement more robust error handling to cover edge cases and unexpected inputs.
              
            - **Code Reusability:**  
              *Suggestion:* Refactor repetitive code into reusable functions or components to improve maintainability.

            - **Testing Coverage:**  
              *Suggestion:* Add additional unit tests to cover critical functionalities and edge cases.

            ---

            **üêõ Bugs Found**

            | Bug Name                 | Affected Files            | Description                                     | Confidence |
            |--------------------------|---------------------------|-------------------------------------------------|------------|
            | [Null Pointer](#null-pointer) | `src/utils.js`            | Potential null reference in `calculate()`       | High üü¢    |
            | [Memory Leak](#memory-leak)     | `src/processor.js`        | Unreleased memory in loop handling              | Medium üü°  |
            | [UI Glitch](#ui-glitch)        | `src/components/UI.js`    | Misalignment of buttons on smaller screens     | Low üî¥     |

            ---

            ### Bug Details

            #### Null Pointer
            - **Affected Files:** `src/utils.js`
            - **Description:** Potential null reference in the `calculate()` function could lead to runtime errors if not properly handled.
            - **Confidence:** High üü¢

            #### Memory Leak
            - **Affected Files:** `src/processor.js`
            - **Description:** Unreleased memory in the loop handling could degrade performance over time.
            - **Confidence:** Medium üü°

            #### UI Glitch
            - **Affected Files:** `src/components/UI.js`
            - **Description:** Misalignment of buttons on smaller screens affects user experience.
            - **Confidence:** Low üî¥

            ---

            **‚ö° Performance Considerations**
            - **Optimizing Loops:**  
              *Suggestion:* Review and optimize nested loops to reduce computational complexity and improve performance.

            ---

            **üìè Best Practices**
            - **Consistent Naming Conventions:**  
              *Suggestion:* Adopt consistent naming conventions for variables and functions to enhance code readability.

            ---

            **üß™ Testing**
            - **Comprehensive Test Cases:**  
              *Suggestion:* Include test cases for edge scenarios to ensure robustness and reliability.

            ---

            **üîö Conclusion**  
            *The PR is well-executed with clear benefits to the project. Addressing the highlighted areas will further strengthen the codebase and ensure seamless integration.*

            ---

            **End of Review**
